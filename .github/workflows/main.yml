name: Front-end

on:
  push:
    branches:
    - main
    
jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: AngualrProject
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install
      
    - name: Build
      run: npm run build:prod
      
    #- name: Test
      #run: npm run test
      
    #- name: Lint
      #run: npm run lint
      
    - name: Deploy
      if: success()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.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 }}
        publish_dir: dist/ecommerce
        enable_jekyll: true
  build-frontend:
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    steps:
      - name: Checks out repo
        uses: actions/checkout@v2
      - name: Build the Docker image
        run: docker build -f Dockerfile --tag europe-west1-docker.pkg.dev/ceri-m1-ecommerce-2022/redpanda/frontend:1.3.2 .
      - name: Login to registry
        run : docker login -u _json_key_base64 -p ${{ secrets.DOCKER_REGISTRY_PASSWORD }} https://europe-west1-docker.pkg.dev/ceri-m1-ecommerce-2022/redpanda
      - name: push image 
        run: docker push europe-west1-docker.pkg.dev/ceri-m1-ecommerce-2022/redpanda/frontend:1.3.2

  deploy-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/src

    # Checks out the entire repo.
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    #Task for setting up Python 3.8 using actions/setup-python@v2 Github action
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    
    #Install python virtual env
    - name: Install Python Virtual ENV
      run: pip3 install virtualenv

    - name: virtual ENV
      uses: actions/setup-python@v2
      id: cache-venv
      with:
        path: venv
        key: ${{ runner.os }}-venv-${{hashFiles('**/requirements*.txt')}}
        restore-keys: |
          ${{ runner.os }}-venv-
        
    - name: Activate Virtual ENV
      run: python3 -m venv venv && source venv/bin/activate && pip3 install -r requirements.txt
      if: steps.cache-venv.outputs.cache-hit != 'true'
    
    #Task for installing dependencies, multi-line command
    
    # Task for testing with pytest
    #- name: Run Tests
      #run: pytest
    - name: Run Tests
      run: . venv/bin/activate && pytest
    
    #- name: Lint with black
      #run: |
        # Code formatting with black, check every python file in the src directory 
        #black 
        #black --check

    # Generates a openapi.yaml file based on the FastAPI project.
    - name: Generate OpenAPI file
      uses: column-street/fastapi-openapi-specs-action@v1.0.0
      with:
        fileName: songs.py
        appName: app
      
    # Pushes all of these changes into the GitHub repository.
    - name: Push changes to client branch
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.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 }}
        branch: main
        force: True
  build-backend:
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    steps:
      - name: Checks out repo
        uses: actions/checkout@v2
      - name: Build the Docker image
        run: docker build -f Dockerfile.backend --tag europe-west1-docker.pkg.dev/ceri-m1-ecommerce-2022/redpanda/backend:1.3.2 .
      - name: Login to registry
        run : docker login -u _json_key_base64 -p ${{ secrets.DOCKER_REGISTRY_PASSWORD }} http://europe-west1-docker.pkg.dev/ceri-m1-ecommerce-2022/redpanda
      - name: push image 
        run: docker push europe-west1-docker.pkg.dev/ceri-m1-ecommerce-2022/redpanda/backend:1.3.2

  terraform-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    needs: [build-frontend, build-backend]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
      - name: Terraform Format
        id: fmt
        run: terraform fmt
      - name: Terraform init
        id: init
        run: terraform init
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: terraform plan -no-color -input=false
        
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=False 
